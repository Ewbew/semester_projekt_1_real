
projekt_bil_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  0000069e  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800218  00800218  0000074a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020d9  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001435  00000000  00000000  00002a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4f  00000000  00000000  00003e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  0000489c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6c  00000000  00000000  00004c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f9  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	bd c1       	rjmp	.+890    	; 0x384 <__vector_2>
   a:	00 00       	nop
   c:	e2 c1       	rjmp	.+964    	; 0x3d2 <__vector_3>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b0 c0       	rjmp	.+352    	; 0x216 <__vector_45>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	49 02       	muls	r20, r25

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	ee e9       	ldi	r30, 0x9E	; 158
  fe:	f6 e0       	ldi	r31, 0x06	; 6
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a8 31       	cpi	r26, 0x18	; 24
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	a8 e1       	ldi	r26, 0x18	; 24
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a3 32       	cpi	r26, 0x23	; 35
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	ab d2       	rcall	.+1366   	; 0x68a <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	70 d1       	rcall	.+736    	; 0x420 <main>
 140:	ac c2       	rjmp	.+1368   	; 0x69a <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <_ZN14DrivingControlC1Ev>:
// Der er i alt 11 forskellige værdier, én for hver refleksbrik
const int DrivingControl::SPEED_LEVELS[] = {100, 100, 100, 60, 90, 90, 90, 90, 100, 100, 55, 0};
const int DrivingControl::MAX_COUNTER = sizeof(SPEED_LEVELS) / sizeof(SPEED_LEVELS[0]);


DrivingControl::DrivingControl():counter_(0), previous_speed_(0), previous_direction_(true) {}
 144:	fc 01       	movw	r30, r24
 146:	11 82       	std	Z+1, r1	; 0x01
 148:	10 82       	st	Z, r1
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	14 82       	std	Z+4, r1	; 0x04
 150:	13 82       	std	Z+3, r1	; 0x03
 152:	08 95       	ret

00000154 <_ZN14DrivingControl11get_counterEv>:

int DrivingControl::get_counter(){
	return counter_;
}
 154:	fc 01       	movw	r30, r24
 156:	83 81       	ldd	r24, Z+3	; 0x03
 158:	94 81       	ldd	r25, Z+4	; 0x04
 15a:	08 95       	ret

0000015c <_ZN14DrivingControl9get_speedEv>:


// OBS: Disse værdier skal ændres indtil at bilen kører igennem uden for mange fejl; de bestemmes gennem testkørlser.
// OBS: Det kan være, at bilen bliver nødt til at få sat speed til 0, i stedet for bare at skifte retning.
int DrivingControl::get_speed() {
	if (counter_ >= 0 && counter_ < MAX_COUNTER) {
 15c:	fc 01       	movw	r30, r24
 15e:	83 81       	ldd	r24, Z+3	; 0x03
 160:	94 81       	ldd	r25, Z+4	; 0x04
 162:	8c 30       	cpi	r24, 0x0C	; 12
 164:	91 05       	cpc	r25, r1
 166:	40 f4       	brcc	.+16     	; 0x178 <_ZN14DrivingControl9get_speedEv+0x1c>
		return SPEED_LEVELS[counter_];
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	fc 01       	movw	r30, r24
 16e:	e0 50       	subi	r30, 0x00	; 0
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	80 81       	ld	r24, Z
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	08 95       	ret
		} else {
		return 0;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 17c:	08 95       	ret

0000017e <_ZN14DrivingControl17increment_counterEv>:

void DrivingControl::increment_counter(){
	counter_++;
 17e:	fc 01       	movw	r30, r24
 180:	23 81       	ldd	r18, Z+3	; 0x03
 182:	34 81       	ldd	r19, Z+4	; 0x04
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	3f 4f       	sbci	r19, 0xFF	; 255
 188:	34 83       	std	Z+4, r19	; 0x04
 18a:	23 83       	std	Z+3, r18	; 0x03
 18c:	08 95       	ret

0000018e <_ZN14DrivingControl20is_forward_directionEv>:
}

bool DrivingControl::is_forward_direction() {
	return counter_ < 6 || counter_ >= 8;
 18e:	fc 01       	movw	r30, r24
 190:	23 81       	ldd	r18, Z+3	; 0x03
 192:	34 81       	ldd	r19, Z+4	; 0x04
 194:	26 50       	subi	r18, 0x06	; 6
 196:	31 09       	sbc	r19, r1
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	08 f4       	brcc	.+2      	; 0x1a2 <_ZN14DrivingControl20is_forward_directionEv+0x14>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
}
 1a2:	08 95       	ret

000001a4 <_ZN14DrivingControl16get_lights_stateEv>:


// if-statements følger samme logik som get_speed()
bool DrivingControl::get_lights_state() { // They should be on at all times
	return counter_ < 11; //counter_ < 6 || (counter_ >= 7 && counter_ < 11);
 1a4:	fc 01       	movw	r30, r24
 1a6:	23 81       	ldd	r18, Z+3	; 0x03
 1a8:	34 81       	ldd	r19, Z+4	; 0x04
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	2b 30       	cpi	r18, 0x0B	; 11
 1ae:	31 05       	cpc	r19, r1
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <_ZN14DrivingControl16get_lights_stateEv+0x10>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
}
 1b4:	08 95       	ret

000001b6 <_ZN14DrivingControl15get_brake_stateEv>:


bool DrivingControl::get_brake_state(){
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	int current_speed = get_speed();
 1c0:	cd df       	rcall	.-102    	; 0x15c <_ZN14DrivingControl9get_speedEv>
 1c2:	8c 01       	movw	r16, r24
	bool current_direction = is_forward_direction();
 1c4:	ce 01       	movw	r24, r28
 1c6:	e3 df       	rcall	.-58     	; 0x18e <_ZN14DrivingControl20is_forward_directionEv>
	
	// Hvis nuværende fart end lavere end tidligere fart, skal der returneres true;
	// Derudover, hvis der er skiftet retning siden sidste refleksbrik, må bilen også skulle bremse/standse
	bool should_brake = current_speed < previous_speed_ || current_direction != previous_direction_;
 1c8:	28 81       	ld	r18, Y
 1ca:	39 81       	ldd	r19, Y+1	; 0x01
 1cc:	02 17       	cp	r16, r18
 1ce:	13 07       	cpc	r17, r19
 1d0:	2c f0       	brlt	.+10     	; 0x1dc <_ZN14DrivingControl15get_brake_stateEv+0x26>
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	89 17       	cp	r24, r25
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <_ZN14DrivingControl15get_brake_stateEv+0x2a>
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <_ZN14DrivingControl15get_brake_stateEv+0x2c>
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <_ZN14DrivingControl15get_brake_stateEv+0x2c>
 1e0:	90 e0       	ldi	r25, 0x00	; 0

	previous_speed_ = current_speed;
 1e2:	19 83       	std	Y+1, r17	; 0x01
 1e4:	08 83       	st	Y, r16
	previous_direction_ = current_direction;
 1e6:	8a 83       	std	Y+2, r24	; 0x02

	return should_brake;
}
 1e8:	89 2f       	mov	r24, r25
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <_ZN14DrivingControl15get_sound_indexEv>:

int DrivingControl::get_sound_index(){
	if (counter_ == 0){
 1f4:	fc 01       	movw	r30, r24
 1f6:	83 81       	ldd	r24, Z+3	; 0x03
 1f8:	94 81       	ldd	r25, Z+4	; 0x04
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	31 f0       	breq	.+12     	; 0x20a <_ZN14DrivingControl15get_sound_indexEv+0x16>
		return 1;
	} else if (counter_ > 0 && counter_ < 11){
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	0a 97       	sbiw	r24, 0x0a	; 10
 202:	30 f4       	brcc	.+12     	; 0x210 <_ZN14DrivingControl15get_sound_indexEv+0x1c>
		return 2;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
	return should_brake;
}

int DrivingControl::get_sound_index(){
	if (counter_ == 0){
		return 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 95       	ret
	} else if (counter_ > 0 && counter_ < 11){
		return 2;
	} else{
		return 3;
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	90 e0       	ldi	r25, 0x00	; 0
	}
 214:	08 95       	ret

00000216 <__vector_45>:
#include <avr/interrupt.h>
#define FRONT_INTENSITY 68
#define BACK_INTENSITY 20
#define BRAKE_INTENSITY 97

ISR(TIMER4_OVF_vect){
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
	OCR3B = (1024*BACK_INTENSITY)/100;
 224:	8c ec       	ldi	r24, 0xCC	; 204
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 22c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	
	// Stopping the clock
	TCCR4B = 0x00;
 230:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	
	// Making sure that the overflow flag is reset:
	TIFR4 = 0b00000001;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	89 bb       	out	0x19, r24	; 25
	
	// Clearing the timer 4 overflow interrut:
	TIMSK4 = 0x00;	
 238:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
}
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <_ZN6LightsC1Ev>:


Lights::Lights():on_(false),brake_(false){
 24a:	fc 01       	movw	r30, r24
 24c:	10 82       	st	Z, r1
 24e:	11 82       	std	Z+1, r1	; 0x01
	
	DDRE |= 0b00011000;
 250:	8d b1       	in	r24, 0x0d	; 13
 252:	88 61       	ori	r24, 0x18	; 24
 254:	8d b9       	out	0x0d, r24	; 13
// Light intensity PWM //
	// PWM signalet bliver genereret af Timer 3:
	// Bit 7 & 6: Clearing when upcounting, setting when down counting (compare match, 10); output pin is OC3A (PE, ben 3)
	// Bit 5 & 4: Clearing when upcounting, setting when down counting (compare match, 10); output pin is OC3B (PE, ben 4)
	// Bit 1 & 0: PWM, Phase correct, 10-bit (TOP = 1024)
	TCCR3A = 0b10100011;
 256:	83 ea       	ldi	r24, 0xA3	; 163
 258:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	// Bit 2, 1 & 0: Prescaler = 8
	TCCR3B = 0b00000010;
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	// OBS: These settings have yet to be tested (17/6 2024, Otto)
	
	// Setting OCR initially to 0, so that the duty cycle is zero (lights off)
	
	// Front lights
	OCR3A =  0;
 262:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 266:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	
	// Back lights
	OCR3B = 0;
 26a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 26e:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 272:	08 95       	ret

00000274 <_ZN6Lights10set_lightsEb>:
}

void Lights::set_lights(bool on){
	if(on){
 274:	66 23       	and	r22, r22
 276:	69 f0       	breq	.+26     	; 0x292 <_ZN6Lights10set_lightsEb+0x1e>
		OCR3A = static_cast<int>((1024L * FRONT_INTENSITY) / 100);
 278:	88 eb       	ldi	r24, 0xB8	; 184
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 280:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		OCR3B = static_cast<int>((1024L * BACK_INTENSITY) / 100);
 284:	8c ec       	ldi	r24, 0xCC	; 204
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 28c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 290:	08 95       	ret
	} else {
		OCR3A = 0;
 292:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 296:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		OCR3B = 0;
 29a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 29e:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 2a2:	08 95       	ret

000002a4 <_ZN6Lights20activate_brake_stateEv>:
void Lights::activate_brake_state(){
		// Vi initierer en timer, der sørger for at bremselyset er tændt i 0.5 sekunder, uden at bremse resten af programmet
		// Vi bruger timer 4 til dette:
		
		// Sætter overflow interrupt for Timer 4
		TIMSK4 = 0b00000001;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
		
		// Beregnet værdi for at få et delay på (næsten) 0.5 sekunder
		TCNT4 = 57724; // Old value: 57724
 2aa:	8c e7       	ldi	r24, 0x7C	; 124
 2ac:	91 ee       	ldi	r25, 0xE1	; 225
 2ae:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 2b2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
		
		// Normal mode
		TCCR4A = 0b00000000;
 2b6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		
		// Bit 2, 1 & 0: Prescaler = 1024 - dette starter timeren
		TCCR4B = 0b00000101;
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
		
		// Setting the back light intensity to brake state:
		OCR3B = static_cast<int>((1024L * BRAKE_INTENSITY) / 100);
 2c0:	81 ee       	ldi	r24, 0xE1	; 225
 2c2:	93 e0       	ldi	r25, 0x03	; 3
 2c4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 2c8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 2cc:	08 95       	ret

000002ce <_Z41__static_initialization_and_destruction_0ii>:
	// er koden der er i de forskellige ISR'er
    while (1) 
    {
		
    }
}
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	81 f4       	brne	.+32     	; 0x2f2 <_Z41__static_initialization_and_destruction_0ii+0x24>
 2d2:	6f 3f       	cpi	r22, 0xFF	; 255
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <_Z41__static_initialization_and_destruction_0ii+0x24>

// Start variable sættes til at være false til at starte med; skiftes til true i ISR for INT0, 
// som aktiveres ved et tryk på en eksterne knap på bilen
volatile bool start = false;

DrivingControl control;
 2d8:	8e e1       	ldi	r24, 0x1E	; 30
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	33 df       	rcall	.-410    	; 0x144 <_ZN14DrivingControlC1Ev>
SoundDriver sound(30);
 2de:	6e e1       	ldi	r22, 0x1E	; 30
 2e0:	8d e1       	ldi	r24, 0x1D	; 29
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	5a d1       	rcall	.+692    	; 0x59a <_ZN11SoundDriverC1Eh>
Motor motor;
 2e6:	8a e1       	ldi	r24, 0x1A	; 26
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	d9 d0       	rcall	.+434    	; 0x49e <_ZN5MotorC1Ev>
Lights lights;
 2ec:	88 e1       	ldi	r24, 0x18	; 24
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	ac cf       	rjmp	.-168    	; 0x24a <_ZN6LightsC1Ev>
 2f2:	08 95       	ret

000002f4 <_Z16handle_interruptv>:
 2f4:	cf 93       	push	r28

void handle_interrupt() {
	//// Bemærk: counter_ svarer til refleksbriksignaltæller, altså hvor mange refleksbriksignaler der er blevet talt op indtil videre
	
	// DrivingControl objektet tæller sin member variabel, counter_, op med én
	control.increment_counter();
 2f6:	8e e1       	ldi	r24, 0x1E	; 30
 2f8:	92 e0       	ldi	r25, 0x02	; 2
 2fa:	41 df       	rcall	.-382    	; 0x17e <_ZN14DrivingControl17increment_counterEv>
	
	// Motor objektet sættet hastigheden, som er bestemt af DrivingControl objektet ud fra hvad counter_ er.
	// control.get_speed() returnerer en integer mellem 0 og 100, som svarer til duty cycle
	motor.set_speed(control.get_speed());
 2fc:	8e e1       	ldi	r24, 0x1E	; 30
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	2d df       	rcall	.-422    	; 0x15c <_ZN14DrivingControl9get_speedEv>
 302:	bc 01       	movw	r22, r24
 304:	8a e1       	ldi	r24, 0x1A	; 26
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	f0 d0       	rcall	.+480    	; 0x4ea <_ZN5Motor9set_speedEi>
	
	// Motor objektet sætter retningen, som er bestemt af DrivingControl objektet ud fra hvad counter_ er.
	// control.is_forward_direction() returnerer en bool  hvis den er true, så er retningen fremad
	motor.set_forward_direction(control.is_forward_direction());
 30a:	8e e1       	ldi	r24, 0x1E	; 30
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	3f df       	rcall	.-386    	; 0x18e <_ZN14DrivingControl20is_forward_directionEv>
 310:	68 2f       	mov	r22, r24
 312:	8a e1       	ldi	r24, 0x1A	; 26
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	fc d0       	rcall	.+504    	; 0x510 <_ZN5Motor21set_forward_directionEb>
	
	// Sound objektet spiller en lyd, som er bestemt af DrivingControl objektet ud fra hvad counter_ er.
	// control.get_counter() returnerer en integer, som er counter af refleksbriksignaler.
	sound.play_sound(control.get_sound_index());
 318:	8e e1       	ldi	r24, 0x1E	; 30
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	6b df       	rcall	.-298    	; 0x1f4 <_ZN14DrivingControl15get_sound_indexEv>
 31e:	68 2f       	mov	r22, r24
 320:	8d e1       	ldi	r24, 0x1D	; 29
 322:	92 e0       	ldi	r25, 0x02	; 2
 324:	ff d0       	rcall	.+510    	; 0x524 <_ZN11SoundDriver10play_soundEh>
	
	// Lights objektet bestemmer tilstanden for- og baglysene, som er bestem af DrivingControl objektet ud fra hvad counter_ er.
	// control.get_lights_state() returnerer en bool  hvis den er true, så tændes for- og baglysene og omvendt for false.
	lights.set_lights(control.get_lights_state());
 326:	8e e1       	ldi	r24, 0x1E	; 30
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	3c df       	rcall	.-392    	; 0x1a4 <_ZN14DrivingControl16get_lights_stateEv>
 32c:	68 2f       	mov	r22, r24
 32e:	88 e1       	ldi	r24, 0x18	; 24
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	a0 df       	rcall	.-192    	; 0x274 <_ZN6Lights10set_lightsEb>
 334:	8e e1       	ldi	r24, 0x1E	; 30
	
	// control.get_brake_state() returnerer en bool  den returnerer true, hvis hastigheden for nuværende refleksbrikcounter er lavere end hastigheden for den tidligere,
	// ELLER hvis der er lavet er retningsskift mellem sidste refleksbrikcounter og den nuværende. Ellers returnerer control.get_brake_state().
	// Hvis control.get_brake_state() returnerer true, og refleksbrikcounter er lavere end 11 (som er den sidste refleksbrik), så aktiveres bremselyset i 0.5 sekunder.
	if(control.get_brake_state() && control.get_counter() < 11) lights.activate_brake_state();
 336:	92 e0       	ldi	r25, 0x02	; 2
 338:	3e df       	rcall	.-388    	; 0x1b6 <_ZN14DrivingControl15get_brake_stateEv>
 33a:	c8 2f       	mov	r28, r24
 33c:	88 23       	and	r24, r24
 33e:	31 f0       	breq	.+12     	; 0x34c <_Z16handle_interruptv+0x58>
 340:	8e e1       	ldi	r24, 0x1E	; 30
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	07 df       	rcall	.-498    	; 0x154 <_ZN14DrivingControl11get_counterEv>
 346:	0b 97       	sbiw	r24, 0x0b	; 11
 348:	0c f0       	brlt	.+2      	; 0x34c <_Z16handle_interruptv+0x58>
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	cc 23       	and	r28, r28
 34e:	19 f0       	breq	.+6      	; 0x356 <_Z16handle_interruptv+0x62>
 350:	88 e1       	ldi	r24, 0x18	; 24
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	a7 df       	rcall	.-178    	; 0x2a4 <_ZN6Lights20activate_brake_stateEv>
 356:	8d b3       	in	r24, 0x1d	; 29
 358:	89 7f       	andi	r24, 0xF9	; 249
 35a:	8d bb       	out	0x1d, r24	; 29
	
	// Vi dissabler de to ISR for refleksbrikkerne kortvarigt, for at være sikker på,
	//at der kun bliver talt op én gang per reflekspar på banen:
	EIMSK &= 0b11111001;
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	85 ea       	ldi	r24, 0xA5	; 165
 360:	9e e0       	ldi	r25, 0x0E	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <_Z16handle_interruptv+0x6e>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <_Z16handle_interruptv+0x78>
 36c:	00 00       	nop
 36e:	8c b3       	in	r24, 0x1c	; 28
 370:	88 23       	and	r24, r24
 372:	19 f0       	breq	.+6      	; 0x37a <_Z16handle_interruptv+0x86>
	_delay_ms(DEBOUNCE_DELAY_MS); // OBS; denne værdi skal findes gennem tests. Prøvede værdier: 150
	
	// For at være på den sikre side, så nulstiller vi interruptsflagene for INT1 & INT2, i tilfælde af, at de var blevet sat.
	// Man nulstiller dem ved at skrive 1 til de tilsvarende bit pladser i flag registret:
	if(EIFR != 0){
 374:	8c b3       	in	r24, 0x1c	; 28
 376:	87 60       	ori	r24, 0x07	; 7
 378:	8c bb       	out	0x1c, r24	; 28
		EIFR |= 0b00000111;
 37a:	8d b3       	in	r24, 0x1d	; 29
 37c:	86 60       	ori	r24, 0x06	; 6
 37e:	8d bb       	out	0x1d, r24	; 29
	}
	
	// Vi enabler de to interrupts for INT1 og INT2 igen
	EIMSK |= 0b00000110;
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <__vector_2>:
 384:	1f 92       	push	r1
}
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63

*/

// Interrupt service rutine for refleksbrik 1  sættes i gang, når den modtager et signal
// Se ovenstående definition for funktionen handle_interrupt(), for hvad der sker ved interruptet
ISR(INT1_vect){
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	0b b6       	in	r0, 0x3b	; 59
 390:	0f 92       	push	r0
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	handle_interrupt();
 3aa:	a4 df       	rcall	.-184    	; 0x2f4 <_Z16handle_interruptv>
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0b be       	out	0x3b, r0	; 59
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <__vector_3>:

// Interrupt service rutine for refleksbrik 2  sættes i gang, når den modtager et signal
// Se ovenstående definition for funktionen handle_interrupt(), for hvad der sker ved interruptet
ISR(INT2_vect){
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	0b b6       	in	r0, 0x3b	; 59
 3de:	0f 92       	push	r0
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	handle_interrupt();
 3f8:	7d df       	rcall	.-262    	; 0x2f4 <_Z16handle_interruptv>
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0b be       	out	0x3b, r0	; 59
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <main>:

int main(void)
{
	// Setting the PA pin 7 to be input (is connected with SW7)
	DDRA &= 0b01111111;
 420:	81 b1       	in	r24, 0x01	; 1
 422:	8f 77       	andi	r24, 0x7F	; 127
 424:	81 b9       	out	0x01, r24	; 1
	
	// Interrupts input
	DDRD &= 0b11111001;
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	89 7f       	andi	r24, 0xF9	; 249
 42a:	8a b9       	out	0x0a, r24	; 10
	
	// Opsætning af ISR'er; alle sættes til at aktivere korresponderende ISR ved falling edge
	EICRA = 0b00101000;
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
		
	// Vi enabler de tre interrupts
	EIMSK |= 0b00000110;
 432:	8d b3       	in	r24, 0x1d	; 29
 434:	86 60       	ori	r24, 0x06	; 6
 436:	8d bb       	out	0x1d, r24	; 29
	
	// Vi venter på, at der bliver trykket på SW7 knappen på arduinoen, før at bilen sætter i gang
	while (PINA & 0b10000000)
 438:	07 9b       	sbis	0x00, 7	; 0
 43a:	0a c0       	rjmp	.+20     	; 0x450 <main+0x30>
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	35 ea       	ldi	r19, 0xA5	; 165
 440:	8e e0       	ldi	r24, 0x0E	; 14
 442:	21 50       	subi	r18, 0x01	; 1
 444:	30 40       	sbci	r19, 0x00	; 0
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <main+0x22>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <main+0x2c>
 44c:	00 00       	nop
 44e:	f4 cf       	rjmp	.-24     	; 0x438 <main+0x18>
		_delay_ms(DEBOUNCE_DELAY_MS);
	}
	
	//// Start rutine, som sætter bilen i gang
	// Startlyd afspilles
	sound.play_sound(control.get_sound_index());
 450:	8e e1       	ldi	r24, 0x1E	; 30
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	cf de       	rcall	.-610    	; 0x1f4 <_ZN14DrivingControl15get_sound_indexEv>
 456:	68 2f       	mov	r22, r24
 458:	8d e1       	ldi	r24, 0x1D	; 29
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	63 d0       	rcall	.+198    	; 0x524 <_ZN11SoundDriver10play_soundEh>
 45e:	9a ea       	ldi	r25, 0xAA	; 170
 460:	2b ec       	ldi	r18, 0xCB	; 203
 462:	3f ed       	ldi	r19, 0xDF	; 223
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	91 50       	subi	r25, 0x01	; 1
 468:	20 40       	sbci	r18, 0x00	; 0
 46a:	30 40       	sbci	r19, 0x00	; 0
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	d9 f7       	brne	.-10     	; 0x466 <main+0x46>
 470:	00 00       	nop
	
	_delay_ms(START_DELAY_FOR_SOUND);
	
	// Motorhastigheden sættes, ud fra hvad counter_ er DrivingControl objektet (ved counter_ = 0 er hastigheden 100)
	motor.set_speed(control.get_speed());
 472:	8e e1       	ldi	r24, 0x1E	; 30
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	72 de       	rcall	.-796    	; 0x15c <_ZN14DrivingControl9get_speedEv>
 478:	bc 01       	movw	r22, r24
 47a:	8a e1       	ldi	r24, 0x1A	; 26
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	35 d0       	rcall	.+106    	; 0x4ea <_ZN5Motor9set_speedEi>
	
	// Lysene tændes (siden counter_ fra DrivingControl objektet på dettet tidspunkt er counter_ = 0
	lights.set_lights(control.get_lights_state());
 480:	8e e1       	ldi	r24, 0x1E	; 30
 482:	92 e0       	ldi	r25, 0x02	; 2
 484:	8f de       	rcall	.-738    	; 0x1a4 <_ZN14DrivingControl16get_lights_stateEv>
 486:	68 2f       	mov	r22, r24
 488:	88 e1       	ldi	r24, 0x18	; 24
 48a:	92 e0       	ldi	r25, 0x02	; 2
 48c:	f3 de       	rcall	.-538    	; 0x274 <_ZN6Lights10set_lightsEb>
 48e:	78 94       	sei
	
	// Enable global interrupt flag:
	sei();
 490:	ff cf       	rjmp	.-2      	; 0x490 <main+0x70>

00000492 <_GLOBAL__sub_I_start>:
 492:	6f ef       	ldi	r22, 0xFF	; 255
	// er koden der er i de forskellige ISR'er
    while (1) 
    {
		
    }
}
 494:	7f ef       	ldi	r23, 0xFF	; 255
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	19 cf       	rjmp	.-462    	; 0x2ce <_Z41__static_initialization_and_destruction_0ii>
 49c:	08 95       	ret

0000049e <_ZN5MotorC1Ev>:


// Every class object starts with having its member values set to the following initial values:

// Motor klasse objektet initialiseres med en hastighed på 0 og forward_direction som true
Motor::Motor():speed_(0), forward_direction_(true) {
 49e:	fc 01       	movw	r30, r24
 4a0:	11 82       	std	Z+1, r1	; 0x01
 4a2:	10 82       	st	Z, r1
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	82 83       	std	Z+2, r24	; 0x02
	
	// Motor PWM (pin 11); sættes som udgang
	DDRB = 0b00100000;
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	84 b9       	out	0x04, r24	; 4
	
	// Setting PINC0 to be output, to control the motor direction (pin #37, marked on the Mega Shield 2560)
	DDRC |= 0x01;
 4ac:	87 b1       	in	r24, 0x07	; 7
 4ae:	81 60       	ori	r24, 0x01	; 1
 4b0:	87 b9       	out	0x07, r24	; 7
	
// SPEED //
	// Motor PWM signalet bliver genereret af Timer 1:
	// Bit 7 & 6: Clearing when upcounting, setting when downcounting (compare match); output pin is OC1A (PB, ben 5
	// Bit 1 & 0: PWM, Phase correct, 10-bit (TOP = 1024)
	TCCR1A = 0b10000011;
 4b2:	83 e8       	ldi	r24, 0x83	; 131
 4b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	// Bit 2, 1 & 0: Prescaler = 64 (is subject to change  e.g. if set to 8, the frequency will be about 977 Hz)
	TCCR1B = 0b00000011;
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	// When setting OCR1A to be equal TOP (2^10), then duty cycle is:
	// Duty cycle = 1 - (OCRn/TOP) = 0 (1 - 1 = 0)
	OCR1A = static_cast<int>((1024L/100L)*speed_);	
 4be:	20 81       	ld	r18, Z
 4c0:	31 81       	ldd	r19, Z+1	; 0x01
 4c2:	c9 01       	movw	r24, r18
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	28 0f       	add	r18, r24
 4d6:	39 1f       	adc	r19, r25
 4d8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4dc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	

// DIRECTION //	
	// Setting the bit to be 1 (forward_direction = true = 0x01), meaning that the output from PC0 will be 5 V:
	PORTC |= forward_direction_;
 4e0:	88 b1       	in	r24, 0x08	; 8
 4e2:	92 81       	ldd	r25, Z+2	; 0x02
 4e4:	89 2b       	or	r24, r25
 4e6:	88 b9       	out	0x08, r24	; 8
 4e8:	08 95       	ret

000004ea <_ZN5Motor9set_speedEi>:
}

// Klassemetoden/funktionen sætter hastigheden ved at skrive en værdi til OCR1A, som styrer signalet fra timer 1
void Motor::set_speed(int speed){
	speed_ = speed;
 4ea:	fc 01       	movw	r30, r24
 4ec:	71 83       	std	Z+1, r23	; 0x01
 4ee:	60 83       	st	Z, r22
	OCR1A = static_cast<int>((1024L/100L)*speed);
 4f0:	cb 01       	movw	r24, r22
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	68 0f       	add	r22, r24
 504:	79 1f       	adc	r23, r25
 506:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 50a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 50e:	08 95       	ret

00000510 <_ZN5Motor21set_forward_directionEb>:
}

// Klassemetoden/funktionen sætter retningen ved at sætte PIN
void Motor::set_forward_direction(bool forward_direction){
	if(forward_direction){ // LSB is being set (the output pin)
 510:	66 23       	and	r22, r22
 512:	21 f0       	breq	.+8      	; 0x51c <_ZN5Motor21set_forward_directionEb+0xc>
		PORTC |= 0b00000001;
 514:	88 b1       	in	r24, 0x08	; 8
 516:	81 60       	ori	r24, 0x01	; 1
 518:	88 b9       	out	0x08, r24	; 8
 51a:	08 95       	ret
	} else { // This just keep all of the other bits in PORTC the same, while the LSB is being cleared (the output pin)
		PORTC &= 0b11111110;
 51c:	88 b1       	in	r24, 0x08	; 8
 51e:	8e 7f       	andi	r24, 0xFE	; 254
 520:	88 b9       	out	0x08, r24	; 8
 522:	08 95       	ret

00000524 <_ZN11SoundDriver10play_soundEh>:
	if (init_volume < 0) init_volume = 0; // Begrænser minimumsværdien af volumen til 0
	if (init_volume > 30) init_volume = 30; // Begrænser maksimalværdien af volumen til 0
	set_volume(init_volume);
}

void SoundDriver::play_sound(unsigned char sound_index) {
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	c6 2f       	mov	r28, r22
	send_char(0x7E);
 52a:	8e e7       	ldi	r24, 0x7E	; 126
 52c:	85 d0       	rcall	.+266    	; 0x638 <_Z9send_charc>
	send_char(0x03);
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	83 d0       	rcall	.+262    	; 0x638 <_Z9send_charc>
	send_char(0x00);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	81 d0       	rcall	.+258    	; 0x638 <_Z9send_charc>
	send_char(0x00);
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	7f d0       	rcall	.+254    	; 0x638 <_Z9send_charc>
	send_char(sound_index);
 53a:	8c 2f       	mov	r24, r28
 53c:	7d d0       	rcall	.+250    	; 0x638 <_Z9send_charc>
 53e:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Vi beregner checksum, som bruges til at fange eventuelle fejl i koden.
	unsigned int checksum = 0xFFFF - (0x03+sound_index) + 1;
 540:	23 96       	adiw	r28, 0x03	; 3
 542:	d1 95       	neg	r29
 544:	c1 95       	neg	r28
	unsigned char ck_sum1 = checksum>>8;
	unsigned char ck_sum2 = checksum & 0xFF;
	send_char(ck_sum1);
 546:	d1 09       	sbc	r29, r1
 548:	8d 2f       	mov	r24, r29
	send_char(ck_sum2);
 54a:	76 d0       	rcall	.+236    	; 0x638 <_Z9send_charc>
 54c:	8c 2f       	mov	r24, r28
 54e:	74 d0       	rcall	.+232    	; 0x638 <_Z9send_charc>
	send_char(0xEF);
 550:	8f ee       	ldi	r24, 0xEF	; 239
 552:	72 d0       	rcall	.+228    	; 0x638 <_Z9send_charc>
 554:	df 91       	pop	r29
}
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <_ZN11SoundDriver10set_volumeEh>:
 55a:	cf 93       	push	r28

void SoundDriver::set_volume(unsigned char volume) {
 55c:	df 93       	push	r29
 55e:	c6 2f       	mov	r28, r22
	
	// Vi sørger for, at hvis volume skrider grænseværdierne, at de blive sat til valide værdier
	// (samme logik somme i klassekonstruktoren).
	if(volume > 30){
 560:	6f 31       	cpi	r22, 0x1F	; 31
 562:	08 f0       	brcs	.+2      	; 0x566 <_ZN11SoundDriver10set_volumeEh+0xc>
		volume = 30;
 564:	ce e1       	ldi	r28, 0x1E	; 30
	} else if (volume < 0){
		volume = 0;
	}
	send_char(0x7E);
 566:	8e e7       	ldi	r24, 0x7E	; 126
 568:	67 d0       	rcall	.+206    	; 0x638 <_Z9send_charc>
	send_char(0x06);
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	65 d0       	rcall	.+202    	; 0x638 <_Z9send_charc>
	send_char(0x00);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	63 d0       	rcall	.+198    	; 0x638 <_Z9send_charc>
	send_char(0x00);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	61 d0       	rcall	.+194    	; 0x638 <_Z9send_charc>
	send_char(volume);
 576:	8c 2f       	mov	r24, r28
 578:	5f d0       	rcall	.+190    	; 0x638 <_Z9send_charc>
 57a:	d0 e0       	ldi	r29, 0x00	; 0
	
	unsigned int checksum = 0xFFFF - (0x06+volume) + 1;
 57c:	26 96       	adiw	r28, 0x06	; 6
 57e:	d1 95       	neg	r29
 580:	c1 95       	neg	r28
	unsigned char ck_sum1 = checksum>>8;
	unsigned char ck_sum2 = checksum & 0xFF;
	send_char(ck_sum1);
 582:	d1 09       	sbc	r29, r1
 584:	8d 2f       	mov	r24, r29
	send_char(ck_sum2);
 586:	58 d0       	rcall	.+176    	; 0x638 <_Z9send_charc>
 588:	8c 2f       	mov	r24, r28
 58a:	56 d0       	rcall	.+172    	; 0x638 <_Z9send_charc>
	send_char(0xF5);
 58c:	85 ef       	ldi	r24, 0xF5	; 245
 58e:	54 d0       	rcall	.+168    	; 0x638 <_Z9send_charc>
 590:	8f ee       	ldi	r24, 0xEF	; 239
	send_char(0xEF);
 592:	52 d0       	rcall	.+164    	; 0x638 <_Z9send_charc>
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <_ZN11SoundDriverC1Eh>:
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
#include "SoundDriver.h"

SoundDriver::SoundDriver(unsigned char init_volume) {
 59e:	cf 93       	push	r28
 5a0:	8c 01       	movw	r16, r24
 5a2:	c6 2f       	mov	r28, r22
	init_UART(9600, 8);
 5a4:	48 e0       	ldi	r20, 0x08	; 8
 5a6:	60 e8       	ldi	r22, 0x80	; 128
 5a8:	75 e2       	ldi	r23, 0x25	; 37
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0a d0       	rcall	.+20     	; 0x5c4 <_Z9init_UARTmh>
	if (init_volume < 0) init_volume = 0; // Begrænser minimumsværdien af volumen til 0
	if (init_volume > 30) init_volume = 30; // Begrænser maksimalværdien af volumen til 0
 5b0:	cf 31       	cpi	r28, 0x1F	; 31
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <_ZN11SoundDriverC1Eh+0x1c>
 5b4:	ce e1       	ldi	r28, 0x1E	; 30
	set_volume(init_volume);
 5b6:	6c 2f       	mov	r22, r28
 5b8:	c8 01       	movw	r24, r16
 5ba:	cf df       	rcall	.-98     	; 0x55a <_ZN11SoundDriver10set_volumeEh>
}
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	08 95       	ret

000005c4 <_Z9init_UARTmh>:
}

char read_char() {
	while (!char_ready()) {}
	return UDR0; 
}
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	8b 01       	movw	r16, r22
 5ca:	9c 01       	movw	r18, r24
 5cc:	0c 52       	subi	r16, 0x2C	; 44
 5ce:	11 40       	sbci	r17, 0x01	; 1
 5d0:	21 09       	sbc	r18, r1
 5d2:	31 09       	sbc	r19, r1
 5d4:	05 3d       	cpi	r16, 0xD5	; 213
 5d6:	10 4c       	sbci	r17, 0xC0	; 192
 5d8:	21 40       	sbci	r18, 0x01	; 1
 5da:	31 05       	cpc	r19, r1
 5dc:	50 f5       	brcc	.+84     	; 0x632 <_Z9init_UARTmh+0x6e>
 5de:	45 30       	cpi	r20, 0x05	; 5
 5e0:	40 f1       	brcs	.+80     	; 0x632 <_Z9init_UARTmh+0x6e>
 5e2:	49 30       	cpi	r20, 0x09	; 9
 5e4:	30 f5       	brcc	.+76     	; 0x632 <_Z9init_UARTmh+0x6e>
 5e6:	28 e1       	ldi	r18, 0x18	; 24
 5e8:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 5ec:	45 50       	subi	r20, 0x05	; 5
 5ee:	44 0f       	add	r20, r20
 5f0:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 5f4:	dc 01       	movw	r26, r24
 5f6:	cb 01       	movw	r24, r22
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	aa 1f       	adc	r26, r26
 5fe:	bb 1f       	adc	r27, r27
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	9c 01       	movw	r18, r24
 60a:	ad 01       	movw	r20, r26
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	44 1f       	adc	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	44 1f       	adc	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	74 e2       	ldi	r23, 0x24	; 36
 620:	84 ef       	ldi	r24, 0xF4	; 244
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	10 d0       	rcall	.+32     	; 0x646 <__udivmodsi4>
 626:	21 50       	subi	r18, 0x01	; 1
 628:	31 09       	sbc	r19, r1
 62a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 62e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <_Z9send_charc>:

void send_char(char character) {
	while ((UCSR0A & 0b00100000) == 0) {} 
 638:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 63c:	95 ff       	sbrs	r25, 5
 63e:	fc cf       	rjmp	.-8      	; 0x638 <_Z9send_charc>
	UDR0 = character;
 640:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 644:	08 95       	ret

00000646 <__udivmodsi4>:
 646:	a1 e2       	ldi	r26, 0x21	; 33
 648:	1a 2e       	mov	r1, r26
 64a:	aa 1b       	sub	r26, r26
 64c:	bb 1b       	sub	r27, r27
 64e:	fd 01       	movw	r30, r26
 650:	0d c0       	rjmp	.+26     	; 0x66c <__udivmodsi4_ep>

00000652 <__udivmodsi4_loop>:
 652:	aa 1f       	adc	r26, r26
 654:	bb 1f       	adc	r27, r27
 656:	ee 1f       	adc	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	a2 17       	cp	r26, r18
 65c:	b3 07       	cpc	r27, r19
 65e:	e4 07       	cpc	r30, r20
 660:	f5 07       	cpc	r31, r21
 662:	20 f0       	brcs	.+8      	; 0x66c <__udivmodsi4_ep>
 664:	a2 1b       	sub	r26, r18
 666:	b3 0b       	sbc	r27, r19
 668:	e4 0b       	sbc	r30, r20
 66a:	f5 0b       	sbc	r31, r21

0000066c <__udivmodsi4_ep>:
 66c:	66 1f       	adc	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	1a 94       	dec	r1
 676:	69 f7       	brne	.-38     	; 0x652 <__udivmodsi4_loop>
 678:	60 95       	com	r22
 67a:	70 95       	com	r23
 67c:	80 95       	com	r24
 67e:	90 95       	com	r25
 680:	9b 01       	movw	r18, r22
 682:	ac 01       	movw	r20, r24
 684:	bd 01       	movw	r22, r26
 686:	cf 01       	movw	r24, r30
 688:	08 95       	ret

0000068a <__tablejump2__>:
 68a:	ee 0f       	add	r30, r30
 68c:	ff 1f       	adc	r31, r31
 68e:	88 1f       	adc	r24, r24
 690:	8b bf       	out	0x3b, r24	; 59
 692:	07 90       	elpm	r0, Z+
 694:	f6 91       	elpm	r31, Z
 696:	e0 2d       	mov	r30, r0
 698:	19 94       	eijmp

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
